{
  "openapi": "3.0.0",
  "info": {
    "title": "E-commerce Backend API (Generated from Code)",
    "version": "1.0.0",
    "description": "API specification for the Telegram-based e-commerce platform, generated directly from the implemented backend code."
  },
  "servers": [
    {
      "url": "/api/v1",
      "description": "Base URL for the API"
    }
  ],
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "schemas": {
      "Error": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "A human-readable error message."
          }
        },
        "required": ["message"]
      },
      "PaginationParams": {
        "type": "object",
        "properties": {
          "page": {
            "type": "integer",
            "format": "int32",
            "description": "Page number for pagination (default: 1).",
            "default": 1
          },
          "limit": {
            "type": "integer",
            "format": "int32",
            "description": "Number of items per page (default: 10, max: 100).",
            "default": 10
          },
          "sort": {
            "type": "string",
            "description": "Sorting order (e.g., '-createdAt' for descending creation date).",
            "default": "-createdAt"
          }
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "format": "ObjectId", "description": "Unique identifier for the user." },
          "telegramId": { "type": "integer", "description": "Telegram user ID." },
          "username": { "type": "string", "description": "User's chosen username." },
          "role": { "type": "string", "enum": ["customer", "vendor", "admin"], "description": "User's role." },
          "createdAt": { "type": "string", "format": "date-time" },
          "updatedAt": { "type": "string", "format": "date-time" }
        },
        "required": ["id", "telegramId", "username", "role"]
      },
      "UserRegistration": {
        "type": "object",
        "properties": {
          "telegramId": { "type": "integer", "description": "Telegram user ID." },
          "username": { "type": "string", "description": "User's chosen username." },
          "role": { "type": "string", "enum": ["customer", "vendor", "admin"], "default": "customer", "description": "User's role (defaults to customer)." }
        },
        "required": ["telegramId", "username"]
      },
      "UserLogin": {
        "type": "object",
        "properties": {
          "telegramId": { "type": "integer", "description": "Telegram user ID." }
        },
        "required": ["telegramId"]
      },
      "UserUpdate": {
        "type": "object",
        "properties": {
          "username": { "type": "string", "description": "New username for the user." }
        }
      },
      "TelegramAuthData": {
        "type": "object",
        "properties": {
          "id": { "type": "integer", "description": "Telegram user ID." },
          "first_name": { "type": "string", "description": "Telegram user's first name." },
          "last_name": { "type": "string", "description": "Telegram user's last name." },
          "username": { "type": "string", "description": "Telegram user's username." },
          "photo_url": { "type": "string", "format": "url", "description": "URL to Telegram user's profile photo." },
          "auth_date": { "type": "integer", "description": "Unix timestamp when the data was authenticated." },
          "hash": { "type": "string", "description": "Data hash for verification." }
        },
        "required": ["id", "auth_date", "hash"]
      },
      "AuthResponse": {
        "type": "object",
        "properties": {
          "user": { "$ref": "#/components/schemas/User" },
          "token": { "type": "string", "description": "JWT authentication token." }
        }
      },
      "Product": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "format": "ObjectId", "description": "Unique identifier for the product." },
          "name": { "type": "string", "description": "Name of the product." },
          "description": { "type": "string", "description": "Description of the product." },
          "price": { "type": "number", "format": "float", "description": "Price of the product." },
          "category": { "type": "string", "format": "ObjectId", "description": "ID of the product's category." },
          "shop": { "type": "string", "format": "ObjectId", "description": "ID of the shop selling the product." },
          "createdAt": { "type": "string", "format": "date-time" },
          "updatedAt": { "type": "string", "format": "date-time" }
        },
        "required": ["id", "name", "description", "price", "category", "shop"]
      },
      "ProductCreate": {
        "type": "object",
        "properties": {
          "name": { "type": "string", "description": "Name of the product." },
          "description": { "type": "string", "description": "Description of the product." },
          "price": { "type": "number", "format": "float", "description": "Price of the product." },
          "category": { "type": "string", "format": "ObjectId", "description": "ID of the product's category." },
          "shop": { "type": "string", "format": "ObjectId", "description": "ID of the shop selling the product." }
        },
        "required": ["name", "description", "price", "category", "shop"]
      },
      "ProductUpdate": {
        "type": "object",
        "properties": {
          "name": { "type": "string", "description": "New name for the product." },
          "description": { "type": "string", "description": "New description for the product." },
          "price": { "type": "number", "format": "float", "description": "New price for the product." },
          "category": { "type": "string", "format": "ObjectId", "description": "New category ID for the product." }
        }
      },
      "Review": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "format": "ObjectId", "description": "Unique identifier for the review." },
          "product": { "type": "string", "format": "ObjectId", "description": "ID of the product being reviewed." },
          "user": { "type": "string", "format": "ObjectId", "description": "ID of the user who wrote the review." },
          "rating": { "type": "integer", "minimum": 1, "maximum": 5, "description": "Rating given to the product (1-5)." },
          "comment": { "type": "string", "description": "Review comment." },
          "createdAt": { "type": "string", "format": "date-time" },
          "updatedAt": { "type": "string", "format": "date-time" }
        },
        "required": ["id", "product", "user", "rating"]
      },
      "ReviewCreate": {
        "type": "object",
        "properties": {
          "rating": { "type": "integer", "minimum": 1, "maximum": 5, "description": "Rating given to the product (1-5)." },
          "comment": { "type": "string", "description": "Review comment." }
        },
        "required": ["rating"]
      },
      "Category": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "format": "ObjectId", "description": "Unique identifier for the category." },
          "name": { "type": "string", "description": "Name of the category." },
          "createdAt": { "type": "string", "format": "date-time" },
          "updatedAt": { "type": "string", "format": "date-time" }
        },
        "required": ["id", "name"]
      },
      "CategoryCreate": {
        "type": "object",
        "properties": {
          "name": { "type": "string", "description": "Name of the category." }
        },
        "required": ["name"]
      },
      "Shop": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "format": "ObjectId", "description": "Unique identifier for the shop." },
          "name": { "type": "string", "description": "Name of the shop." },
          "description": { "type": "string", "description": "Description of the shop." },
          "vendor": { "type": "string", "format": "ObjectId", "description": "ID of the vendor who owns the shop." },
          "createdAt": { "type": "string", "format": "date-time" },
          "updatedAt": { "type": "string", "format": "date-time" }
        },
        "required": ["id", "name", "vendor"]
      },
      "ShopCreate": {
        "type": "object",
        "properties": {
          "name": { "type": "string", "description": "Name of the shop." },
          "description": { "type": "string", "description": "Description of the shop." }
        },
        "required": ["name"]
      },
      "ShopUpdate": {
        "type": "object",
        "properties": {
          "name": { "type": "string", "description": "New name for the shop." },
          "description": { "type": "string", "description": "New description for the shop." }
        }
      },
      "Cart": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "format": "ObjectId", "description": "Unique identifier for the cart." },
          "user": { "type": "string", "format": "ObjectId", "description": "ID of the user who owns the cart." },
          "shop": { "type": "string", "format": "ObjectId", "description": "ID of the shop the cart belongs to (single-shop constraint)." },
          "items": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/CartItem" },
            "description": "List of items in the cart."
          },
          "createdAt": { "type": "string", "format": "date-time" },
          "updatedAt": { "type": "string", "format": "date-time" }
        },
        "required": ["id", "user", "items"]
      },
      "CartItem": {
        "type": "object",
        "properties": {
          "product": { "type": "string", "format": "ObjectId", "description": "ID of the product in the cart." },
          "quantity": { "type": "integer", "minimum": 1, "description": "Quantity of the product." }
        },
        "required": ["product", "quantity"]
      },
      "CartItemAdd": {
        "type": "object",
        "properties": {
          "productId": { "type": "string", "format": "ObjectId", "description": "ID of the product to add to the cart." },
          "quantity": { "type": "integer", "minimum": 1, "description": "Quantity of the product to add." }
        },
        "required": ["productId", "quantity"]
      },
      "CartItemUpdate": {
        "type": "object",
        "properties": {
          "quantity": { "type": "integer", "minimum": 1, "description": "New quantity for the cart item." }
        },
        "required": ["quantity"]
      },
      "Order": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "format": "ObjectId", "description": "Unique identifier for the order." },
          "user": { "type": "string", "format": "ObjectId", "description": "ID of the user who placed the order." },
          "shop": { "type": "string", "format": "ObjectId", "description": "ID of the shop the order belongs to." },
          "items": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/OrderItem" },
            "description": "List of items in the order."
          },
          "status": { "type": "string", "enum": ["pending", "processing", "shipped", "delivered", "cancelled"], "default": "pending", "description": "Current status of the order." },
          "createdAt": { "type": "string", "format": "date-time" },
          "updatedAt": { "type": "string", "format": "date-time" }
        },
        "required": ["id", "user", "shop", "items", "status"]
      },
      "OrderItem": {
        "type": "object",
        "properties": {
          "product": { "type": "string", "format": "ObjectId", "description": "ID of the product at the time of order." },
          "name": { "type": "string", "description": "Name of the product at the time of order." },
          "price": { "type": "number", "format": "float", "description": "Price of the product at the time of order." },
          "quantity": { "type": "integer", "minimum": 1, "description": "Quantity of the product." }
        },
        "required": ["product", "name", "price", "quantity"]
      }
    }
  },
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "paths": {
    "/users/register": {
      "post": {
        "summary": "Register a new user",
        "tags": ["User"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UserRegistration" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/AuthResponse" }
              }
            }
          },
          "409": {
            "description": "Username or Telegram ID already exists",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        }
      }
    },
    "/users/login": {
      "post": {
        "summary": "Login a user",
        "tags": ["User"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UserLogin" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/AuthResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        }
      }
    },
    "/users/telegram-auth": {
      "post": {
        "summary": "Authenticate user via Telegram data",
        "tags": ["User"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/TelegramAuthData" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Telegram authentication successful",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/AuthResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request (e.g., Telegram data missing)",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "401": {
            "description": "Unauthorized (e.g., Invalid Telegram data hash, outdated data)",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "500": {
            "description": "Server error during Telegram authentication",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        }
      }
    },
    "/users/me": {
      "get": {
        "summary": "Get current user profile",
        "tags": ["User"],
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": {
            "description": "User profile retrieved successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/User" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update current user profile",
        "tags": ["User"],
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UserUpdate" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User profile updated successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/User" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        }
      }
    },
    "/admin/users": {
      "get": {
        "summary": "Get all users (Admin only)",
        "tags": ["Admin"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number for pagination (default: 1).",
            "required": false,
            "schema": { "type": "integer", "format": "int32", "default": 1 }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items per page (default: 10, max: 100).",
            "required": false,
            "schema": { "type": "integer", "format": "int32", "default": 10 }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting order (e.g., '-createdAt' for descending creation date).",
            "required": false,
            "schema": { "type": "string", "default": "-createdAt" }
          }
        ],
        "responses": {
          "200": {
            "description": "List of all users retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/User" }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "403": {
            "description": "Forbidden (only admin users can access)",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        }
      }
    },
    "/admin/users/{id}/role": {
      "patch": {
        "summary": "Update a user's role (Admin only)",
        "tags": ["Admin"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "ObjectId" },
            "description": "ID of the user to update."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "role": { "type": "string", "enum": ["customer", "vendor", "admin"], "description": "New role for the user." }
                },
                "required": ["role"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User role updated successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/User" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "403": {
            "description": "Forbidden (only admin users can update roles)",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        }
      }
    },
    "/products": {
      "post": {
        "summary": "Create a new product",
        "tags": ["Product"],
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ProductCreate" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Product created successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Product" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "403": {
            "description": "Forbidden (only vendor or admin can create products)",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Get all products",
        "tags": ["Product"],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number for pagination (default: 1).",
            "required": false,
            "schema": { "type": "integer", "format": "int32", "default": 1 }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items per page (default: 10, max: 100).",
            "required": false,
            "schema": { "type": "integer", "format": "int32", "default": 10 }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting order (e.g., '-createdAt' for descending creation date).",
            "required": false,
            "schema": { "type": "string", "default": "-createdAt" }
          }
        ],
        "responses": {
          "200": {
            "description": "List of all products retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Product" }
                }
              }
            }
          }
        }
      }
    },
    "/products/{id}": {
      "get": {
        "summary": "Get a single product by ID",
        "tags": ["Product"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "ObjectId" },
            "description": "ID of the product to retrieve."
          }
        ],
        "responses": {
          "200": {
            "description": "Product retrieved successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Product" }
              }
            }
          },
          "404": {
            "description": "Product not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update a product by ID",
        "tags": ["Product"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "ObjectId" },
            "description": "ID of the product to update."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ProductUpdate" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Product updated successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Product" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "403": {
            "description": "Forbidden (only vendor or admin can update products)",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Product not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a product by ID",
        "tags": ["Product"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "ObjectId" },
            "description": "ID of the product to delete."
          }
        ],
        "responses": {
          "204": {
            "description": "Product deleted successfully"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "403": {
            "description": "Forbidden (only vendor or admin can delete products)",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Product not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        }
      }
    },
    "/products/{productId}/reviews": {
      "post": {
        "summary": "Create a review for a product",
        "tags": ["Review"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "ObjectId" },
            "description": "ID of the product to review."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ReviewCreate" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Review created successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Review" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "403": {
            "description": "Forbidden (only customer can create reviews)",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Product not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Get reviews for a product",
        "tags": ["Review"],
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "ObjectId" },
            "description": "ID of the product to retrieve reviews for."
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number for pagination (default: 1).",
            "required": false,
            "schema": { "type": "integer", "format": "int32", "default": 1 }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items per page (default: 10, max: 100).",
            "required": false,
            "schema": { "type": "integer", "format": "int32", "default": 10 }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting order (e.g., '-createdAt' for descending creation date).",
            "required": false,
            "schema": { "type": "string", "default": "-createdAt" }
          }
        ],
        "responses": {
          "200": {
            "description": "List of reviews retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Review" }
                }
              }
            }
          },
          "404": {
            "description": "Product not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        }
      }
    },
    "/categories": {
      "post": {
        "summary": "Create a new category",
        "tags": ["Category"],
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CategoryCreate" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Category created successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Category" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "403": {
            "description": "Forbidden (only admin can create categories)",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Get all categories",
        "tags": ["Category"],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number for pagination (default: 1).",
            "required": false,
            "schema": { "type": "integer", "format": "int32", "default": 1 }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items per page (default: 10, max: 100).",
            "required": false,
            "schema": { "type": "integer", "format": "int32", "default": 10 }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting order (e.g., '-createdAt' for descending creation date).",
            "required": false,
            "schema": { "type": "string", "default": "-createdAt" }
          }
        ],
        "responses": {
          "200": {
            "description": "List of all categories retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Category" }
                }
              }
            }
          }
        }
      }
    },
    "/shops": {
      "post": {
        "summary": "Create a new shop",
        "tags": ["Shop"],
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ShopCreate" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Shop created successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Shop" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "403": {
            "description": "Forbidden (only vendor can create a shop)",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        }
      }
    },
    "/shops/{id}": {
      "get": {
        "summary": "Get a single shop by ID",
        "tags": ["Shop"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "ObjectId" },
            "description": "ID of the shop to retrieve."
          }
        ],
        "responses": {
          "200": {
            "description": "Shop retrieved successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Shop" }
              }
            }
          },
          "404": {
            "description": "Shop not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update a shop by ID",
        "tags": ["Shop"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "ObjectId" },
            "description": "ID of the shop to update."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ShopUpdate" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Shop updated successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Shop" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "403": {
            "description": "Forbidden (only vendor can update their shop)",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Shop not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        }
      }
    },
    "/cart": {
      "get": {
        "summary": "Get the current user's cart",
        "tags": ["Cart"],
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": {
            "description": "User's cart retrieved successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Cart" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Add an item to the cart",
        "tags": ["Cart"],
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CartItemAdd" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Item added to cart successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Cart" }
              }
            }
          },
          "400": {
            "description": "Bad Request (e.g., product from different shop, invalid quantity)",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Product not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        }
      }
    },
    "/cart/items/{itemId}": {
      "patch": {
        "summary": "Update an item in the cart",
        "tags": ["Cart"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "itemId",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "ObjectId" },
            "description": "ID of the cart item to update."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CartItemUpdate" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Cart item updated successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Cart" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Cart item not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Remove an item from the cart",
        "tags": ["Cart"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "itemId",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "ObjectId" },
            "description": "ID of the cart item to remove."
          }
        ],
        "responses": {
          "204": {
            "description": "Cart item removed successfully"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Cart item not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        }
      }
    },
    "/orders": {
      "post": {
        "summary": "Create a new order from the cart",
        "tags": ["Order"],
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "201": {
            "description": "Order(s) created successfully from the user's cart",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Order" }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request (e.g., no carts found, empty carts)",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Get all orders for the current user or shop",
        "tags": ["Order"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number for pagination (default: 1).",
            "required": false,
            "schema": { "type": "integer", "format": "int32", "default": 1 }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items per page (default: 10, max: 100).",
            "required": false,
            "schema": { "type": "integer", "format": "int32", "default": 10 }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting order (e.g., '-createdAt' for descending creation date).",
            "required": false,
            "schema": { "type": "string", "default": "-createdAt" }
          }
        ],
        "responses": {
          "200": {
            "description": "List of orders retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Order" }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        }
      }
    },
    "/orders/{id}": {
      "get": {
        "summary": "Get a single order by ID",
        "tags": ["Order"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "ObjectId" },
            "description": "ID of the order to retrieve."
          }
        ],
        "responses": {
          "200": {
            "description": "Order retrieved successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Order" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Order not found or user does not have access",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        }
      }
    }
  }
}